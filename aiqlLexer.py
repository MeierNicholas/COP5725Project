# Generated from aiql.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u0140\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3$")
        buf.write("\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3*")
        buf.write("\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3-\3-\6-\u012d\n-\r-\16-\u012e\5-\u0131\n-\3.\6.")
        buf.write("\u0134\n.\r.\16.\u0135\3/\3/\3\60\6\60\u013b\n\60\r\60")
        buf.write("\16\60\u013c\3\60\3\60\2\2\61\3\3\5\4\7\5\t\6\13\7\r\b")
        buf.write("\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22")
        buf.write("#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\35")
        buf.write("9\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61\3\2")
        buf.write("\4\4\2C\\c|\5\2\13\f\17\17\"\"\2\u0143\2\3\3\2\2\2\2\5")
        buf.write("\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2")
        buf.write("\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2")
        buf.write("\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2")
        buf.write("\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2")
        buf.write("\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2")
        buf.write("W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2")
        buf.write("\3a\3\2\2\2\5i\3\2\2\2\7k\3\2\2\2\tm\3\2\2\2\13r\3\2\2")
        buf.write("\2\ru\3\2\2\2\17x\3\2\2\2\21z\3\2\2\2\23|\3\2\2\2\25~")
        buf.write("\3\2\2\2\27\u0085\3\2\2\2\31\u008a\3\2\2\2\33\u008c\3")
        buf.write("\2\2\2\35\u008e\3\2\2\2\37\u0091\3\2\2\2!\u0094\3\2\2")
        buf.write("\2#\u0098\3\2\2\2%\u009e\3\2\2\2\'\u00a7\3\2\2\2)\u00b0")
        buf.write("\3\2\2\2+\u00b7\3\2\2\2-\u00bf\3\2\2\2/\u00c3\3\2\2\2")
        buf.write("\61\u00c8\3\2\2\2\63\u00cc\3\2\2\2\65\u00d4\3\2\2\2\67")
        buf.write("\u00dd\3\2\2\29\u00df\3\2\2\2;\u00e2\3\2\2\2=\u00e5\3")
        buf.write("\2\2\2?\u00ea\3\2\2\2A\u00ec\3\2\2\2C\u00ee\3\2\2\2E\u00f0")
        buf.write("\3\2\2\2G\u00f3\3\2\2\2I\u00f6\3\2\2\2K\u00fa\3\2\2\2")
        buf.write("M\u00fe\3\2\2\2O\u0106\3\2\2\2Q\u010b\3\2\2\2S\u0110\3")
        buf.write("\2\2\2U\u0119\3\2\2\2W\u0122\3\2\2\2Y\u0130\3\2\2\2[\u0133")
        buf.write("\3\2\2\2]\u0137\3\2\2\2_\u013a\3\2\2\2ab\7c\2\2bc\7p\2")
        buf.write("\2cd\7q\2\2de\7o\2\2ef\7c\2\2fg\7n\2\2gh\7{\2\2h\4\3\2")
        buf.write("\2\2ij\7*\2\2j\6\3\2\2\2kl\7+\2\2l\b\3\2\2\2mn\7h\2\2")
        buf.write("no\7t\2\2op\7q\2\2pq\7o\2\2q\n\3\2\2\2rs\7v\2\2st\7q\2")
        buf.write("\2t\f\3\2\2\2uv\7c\2\2vw\7u\2\2w\16\3\2\2\2xy\7]\2\2y")
        buf.write("\20\3\2\2\2z{\7_\2\2{\22\3\2\2\2|}\7\60\2\2}\24\3\2\2")
        buf.write("\2~\177\7d\2\2\177\u0080\7g\2\2\u0080\u0081\7h\2\2\u0081")
        buf.write("\u0082\7q\2\2\u0082\u0083\7t\2\2\u0083\u0084\7g\2\2\u0084")
        buf.write("\26\3\2\2\2\u0085\u0086\7y\2\2\u0086\u0087\7k\2\2\u0087")
        buf.write("\u0088\7v\2\2\u0088\u0089\7j\2\2\u0089\30\3\2\2\2\u008a")
        buf.write("\u008b\7.\2\2\u008b\32\3\2\2\2\u008c\u008d\7#\2\2\u008d")
        buf.write("\34\3\2\2\2\u008e\u008f\7(\2\2\u008f\u0090\7(\2\2\u0090")
        buf.write("\36\3\2\2\2\u0091\u0092\7~\2\2\u0092\u0093\7~\2\2\u0093")
        buf.write(" \3\2\2\2\u0094\u0095\7t\2\2\u0095\u0096\7g\2\2\u0096")
        buf.write("\u0097\7v\2\2\u0097\"\3\2\2\2\u0098\u0099\7e\2\2\u0099")
        buf.write("\u009a\7q\2\2\u009a\u009b\7w\2\2\u009b\u009c\7p\2\2\u009c")
        buf.write("\u009d\7v\2\2\u009d$\3\2\2\2\u009e\u009f\7f\2\2\u009f")
        buf.write("\u00a0\7k\2\2\u00a0\u00a1\7u\2\2\u00a1\u00a2\7v\2\2\u00a2")
        buf.write("\u00a3\7k\2\2\u00a3\u00a4\7p\2\2\u00a4\u00a5\7e\2\2\u00a5")
        buf.write("\u00a6\7v\2\2\u00a6&\3\2\2\2\u00a7\u00a8\7i\2\2\u00a8")
        buf.write("\u00a9\7t\2\2\u00a9\u00aa\7q\2\2\u00aa\u00ab\7w\2\2\u00ab")
        buf.write("\u00ac\7r\2\2\u00ac\u00ad\7\"\2\2\u00ad\u00ae\7d\2\2\u00ae")
        buf.write("\u00af\7{\2\2\u00af(\3\2\2\2\u00b0\u00b1\7j\2\2\u00b1")
        buf.write("\u00b2\7c\2\2\u00b2\u00b3\7x\2\2\u00b3\u00b4\7k\2\2\u00b4")
        buf.write("\u00b5\7p\2\2\u00b5\u00b6\7i\2\2\u00b6*\3\2\2\2\u00b7")
        buf.write("\u00b8\7u\2\2\u00b8\u00b9\7q\2\2\u00b9\u00ba\7t\2\2\u00ba")
        buf.write("\u00bb\7v\2\2\u00bb\u00bc\7\"\2\2\u00bc\u00bd\7d\2\2\u00bd")
        buf.write("\u00be\7{\2\2\u00be,\3\2\2\2\u00bf\u00c0\7c\2\2\u00c0")
        buf.write("\u00c1\7u\2\2\u00c1\u00c2\7e\2\2\u00c2.\3\2\2\2\u00c3")
        buf.write("\u00c4\7f\2\2\u00c4\u00c5\7g\2\2\u00c5\u00c6\7u\2\2\u00c6")
        buf.write("\u00c7\7e\2\2\u00c7\60\3\2\2\2\u00c8\u00c9\7v\2\2\u00c9")
        buf.write("\u00ca\7q\2\2\u00ca\u00cb\7r\2\2\u00cb\62\3\2\2\2\u00cc")
        buf.write("\u00cd\7h\2\2\u00cd\u00ce\7q\2\2\u00ce\u00cf\7t\2\2\u00cf")
        buf.write("\u00d0\7y\2\2\u00d0\u00d1\7c\2\2\u00d1\u00d2\7t\2\2\u00d2")
        buf.write("\u00d3\7f\2\2\u00d3\64\3\2\2\2\u00d4\u00d5\7d\2\2\u00d5")
        buf.write("\u00d6\7c\2\2\u00d6\u00d7\7e\2\2\u00d7\u00d8\7m\2\2\u00d8")
        buf.write("\u00d9\7y\2\2\u00d9\u00da\7c\2\2\u00da\u00db\7t\2\2\u00db")
        buf.write("\u00dc\7f\2\2\u00dc\66\3\2\2\2\u00dd\u00de\7<\2\2\u00de")
        buf.write("8\3\2\2\2\u00df\u00e0\7/\2\2\u00e0\u00e1\7@\2\2\u00e1")
        buf.write(":\3\2\2\2\u00e2\u00e3\7>\2\2\u00e3\u00e4\7/\2\2\u00e4")
        buf.write("<\3\2\2\2\u00e5\u00e6\7p\2\2\u00e6\u00e7\7w\2\2\u00e7")
        buf.write("\u00e8\7n\2\2\u00e8\u00e9\7n\2\2\u00e9>\3\2\2\2\u00ea")
        buf.write("\u00eb\7>\2\2\u00eb@\3\2\2\2\u00ec\u00ed\7@\2\2\u00ed")
        buf.write("B\3\2\2\2\u00ee\u00ef\7?\2\2\u00efD\3\2\2\2\u00f0\u00f1")
        buf.write("\7>\2\2\u00f1\u00f2\7?\2\2\u00f2F\3\2\2\2\u00f3\u00f4")
        buf.write("\7?\2\2\u00f4\u00f5\7@\2\2\u00f5H\3\2\2\2\u00f6\u00f7")
        buf.write("\7u\2\2\u00f7\u00f8\7w\2\2\u00f8\u00f9\7o\2\2\u00f9J\3")
        buf.write("\2\2\2\u00fa\u00fb\7c\2\2\u00fb\u00fc\7x\2\2\u00fc\u00fd")
        buf.write("\7i\2\2\u00fdL\3\2\2\2\u00fe\u00ff\7g\2\2\u00ff\u0100")
        buf.write("\7z\2\2\u0100\u0101\7g\2\2\u0101\u0102\7e\2\2\u0102\u0103")
        buf.write("\7w\2\2\u0103\u0104\7v\2\2\u0104\u0105\7g\2\2\u0105N\3")
        buf.write("\2\2\2\u0106\u0107\7h\2\2\u0107\u0108\7c\2\2\u0108\u0109")
        buf.write("\7k\2\2\u0109\u010a\7n\2\2\u010aP\3\2\2\2\u010b\u010c")
        buf.write("\7r\2\2\u010c\u010d\7t\2\2\u010d\u010e\7k\2\2\u010e\u010f")
        buf.write("\7x\2\2\u010fR\3\2\2\2\u0110\u0111\7g\2\2\u0111\u0112")
        buf.write("\7z\2\2\u0112\u0113\7r\2\2\u0113\u0114\7n\2\2\u0114\u0115")
        buf.write("\7k\2\2\u0115\u0116\7e\2\2\u0116\u0117\7k\2\2\u0117\u0118")
        buf.write("\7v\2\2\u0118T\3\2\2\2\u0119\u011a\7u\2\2\u011a\u011b")
        buf.write("\7j\2\2\u011b\u011c\7w\2\2\u011c\u011d\7v\2\2\u011d\u011e")
        buf.write("\7f\2\2\u011e\u011f\7q\2\2\u011f\u0120\7y\2\2\u0120\u0121")
        buf.write("\7p\2\2\u0121V\3\2\2\2\u0122\u0123\7e\2\2\u0123\u0124")
        buf.write("\7q\2\2\u0124\u0125\7p\2\2\u0125\u0126\7p\2\2\u0126\u0127")
        buf.write("\7g\2\2\u0127\u0128\7e\2\2\u0128\u0129\7v\2\2\u0129X\3")
        buf.write("\2\2\2\u012a\u0131\7\62\2\2\u012b\u012d\4\62;\2\u012c")
        buf.write("\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012c\3\2\2\2")
        buf.write("\u012e\u012f\3\2\2\2\u012f\u0131\3\2\2\2\u0130\u012a\3")
        buf.write("\2\2\2\u0130\u012c\3\2\2\2\u0131Z\3\2\2\2\u0132\u0134")
        buf.write("\5]/\2\u0133\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0133")
        buf.write("\3\2\2\2\u0135\u0136\3\2\2\2\u0136\\\3\2\2\2\u0137\u0138")
        buf.write("\t\2\2\2\u0138^\3\2\2\2\u0139\u013b\t\3\2\2\u013a\u0139")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013a\3\2\2\2\u013c")
        buf.write("\u013d\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013f\b\60\2")
        buf.write("\2\u013f`\3\2\2\2\7\2\u012e\u0130\u0135\u013c\3\b\2\2")
        return buf.getvalue()


class aiqlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    INT = 44
    STRING = 45
    LETTER = 46
    WS = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'anomaly'", "'('", "')'", "'from'", "'to'", "'as'", "'['", 
            "']'", "'.'", "'before'", "'with'", "','", "'!'", "'&&'", "'||'", 
            "'ret'", "'count'", "'distinct'", "'group by'", "'having'", 
            "'sort by'", "'asc'", "'desc'", "'top'", "'forward'", "'backward'", 
            "':'", "'->'", "'<-'", "'null'", "'<'", "'>'", "'='", "'<='", 
            "'=>'", "'sum'", "'avg'", "'execute'", "'fail'", "'priv'", "'explicit'", 
            "'shutdown'", "'connect'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "STRING", "LETTER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "INT", "STRING", 
                  "LETTER", "WS" ]

    grammarFileName = "aiql.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


