# Generated from aiql.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u0124\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3")
        buf.write("\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3\"\3#")
        buf.write("\3#\3#\3$\3$\3$\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3(\3)")
        buf.write("\3)\3)\3*\3*\3*\3*\3+\3+\3+\3+\3,\3,\6,\u0113\n,\r,\16")
        buf.write(",\u0114\5,\u0117\n,\3-\6-\u011a\n-\r-\16-\u011b\3.\6.")
        buf.write("\u011f\n.\r.\16.\u0120\3.\3.\2\2/\3\3\5\4\7\5\t\6\13\7")
        buf.write("\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21")
        buf.write("!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67")
        buf.write("\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/\3\2\3\5")
        buf.write("\2\13\f\17\17\"\"\2\u0127\2\3\3\2\2\2\2\5\3\2\2\2\2\7")
        buf.write("\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2")
        buf.write("\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2")
        buf.write("\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2")
        buf.write("\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2")
        buf.write("\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\3]\3\2\2\2\5_\3\2\2\2\7a\3\2\2\2\t")
        buf.write("f\3\2\2\2\13i\3\2\2\2\rk\3\2\2\2\17o\3\2\2\2\21r\3\2\2")
        buf.write("\2\23t\3\2\2\2\25w\3\2\2\2\27y\3\2\2\2\31{\3\2\2\2\33")
        buf.write("}\3\2\2\2\35\u0084\3\2\2\2\37\u008a\3\2\2\2!\u0091\3\2")
        buf.write("\2\2#\u0096\3\2\2\2%\u009b\3\2\2\2\'\u00a0\3\2\2\2)\u00a3")
        buf.write("\3\2\2\2+\u00a6\3\2\2\2-\u00aa\3\2\2\2/\u00b0\3\2\2\2")
        buf.write("\61\u00b9\3\2\2\2\63\u00c2\3\2\2\2\65\u00c9\3\2\2\2\67")
        buf.write("\u00d1\3\2\2\29\u00d5\3\2\2\2;\u00da\3\2\2\2=\u00de\3")
        buf.write("\2\2\2?\u00e6\3\2\2\2A\u00ef\3\2\2\2C\u00f1\3\2\2\2E\u00f4")
        buf.write("\3\2\2\2G\u00f7\3\2\2\2I\u00fc\3\2\2\2K\u00fe\3\2\2\2")
        buf.write("M\u0100\3\2\2\2O\u0102\3\2\2\2Q\u0105\3\2\2\2S\u0108\3")
        buf.write("\2\2\2U\u010c\3\2\2\2W\u0116\3\2\2\2Y\u0119\3\2\2\2[\u011e")
        buf.write("\3\2\2\2]^\7*\2\2^\4\3\2\2\2_`\7+\2\2`\6\3\2\2\2ab\7h")
        buf.write("\2\2bc\7t\2\2cd\7q\2\2de\7o\2\2e\b\3\2\2\2fg\7v\2\2gh")
        buf.write("\7q\2\2h\n\3\2\2\2ij\7#\2\2j\f\3\2\2\2kl\7p\2\2lm\7q\2")
        buf.write("\2mn\7v\2\2n\16\3\2\2\2op\7k\2\2pq\7p\2\2q\20\3\2\2\2")
        buf.write("rs\7.\2\2s\22\3\2\2\2tu\7c\2\2uv\7u\2\2v\24\3\2\2\2wx")
        buf.write("\7]\2\2x\26\3\2\2\2yz\7_\2\2z\30\3\2\2\2{|\7\60\2\2|\32")
        buf.write("\3\2\2\2}~\7d\2\2~\177\7g\2\2\177\u0080\7h\2\2\u0080\u0081")
        buf.write("\7q\2\2\u0081\u0082\7t\2\2\u0082\u0083\7g\2\2\u0083\34")
        buf.write("\3\2\2\2\u0084\u0085\7c\2\2\u0085\u0086\7h\2\2\u0086\u0087")
        buf.write("\7v\2\2\u0087\u0088\7g\2\2\u0088\u0089\7t\2\2\u0089\36")
        buf.write("\3\2\2\2\u008a\u008b\7y\2\2\u008b\u008c\7k\2\2\u008c\u008d")
        buf.write("\7v\2\2\u008d\u008e\7j\2\2\u008e\u008f\7k\2\2\u008f\u0090")
        buf.write("\7p\2\2\u0090 \3\2\2\2\u0091\u0092\7y\2\2\u0092\u0093")
        buf.write("\7k\2\2\u0093\u0094\7v\2\2\u0094\u0095\7j\2\2\u0095\"")
        buf.write("\3\2\2\2\u0096\u0097\7r\2\2\u0097\u0098\7t\2\2\u0098\u0099")
        buf.write("\7q\2\2\u0099\u009a\7e\2\2\u009a$\3\2\2\2\u009b\u009c")
        buf.write("\7e\2\2\u009c\u009d\7q\2\2\u009d\u009e\7p\2\2\u009e\u009f")
        buf.write("\7p\2\2\u009f&\3\2\2\2\u00a0\u00a1\7(\2\2\u00a1\u00a2")
        buf.write("\7(\2\2\u00a2(\3\2\2\2\u00a3\u00a4\7~\2\2\u00a4\u00a5")
        buf.write("\7~\2\2\u00a5*\3\2\2\2\u00a6\u00a7\7t\2\2\u00a7\u00a8")
        buf.write("\7g\2\2\u00a8\u00a9\7v\2\2\u00a9,\3\2\2\2\u00aa\u00ab")
        buf.write("\7e\2\2\u00ab\u00ac\7q\2\2\u00ac\u00ad\7w\2\2\u00ad\u00ae")
        buf.write("\7p\2\2\u00ae\u00af\7v\2\2\u00af.\3\2\2\2\u00b0\u00b1")
        buf.write("\7f\2\2\u00b1\u00b2\7k\2\2\u00b2\u00b3\7u\2\2\u00b3\u00b4")
        buf.write("\7v\2\2\u00b4\u00b5\7k\2\2\u00b5\u00b6\7p\2\2\u00b6\u00b7")
        buf.write("\7e\2\2\u00b7\u00b8\7v\2\2\u00b8\60\3\2\2\2\u00b9\u00ba")
        buf.write("\7i\2\2\u00ba\u00bb\7t\2\2\u00bb\u00bc\7q\2\2\u00bc\u00bd")
        buf.write("\7w\2\2\u00bd\u00be\7r\2\2\u00be\u00bf\7\"\2\2\u00bf\u00c0")
        buf.write("\7d\2\2\u00c0\u00c1\7{\2\2\u00c1\62\3\2\2\2\u00c2\u00c3")
        buf.write("\7j\2\2\u00c3\u00c4\7c\2\2\u00c4\u00c5\7x\2\2\u00c5\u00c6")
        buf.write("\7k\2\2\u00c6\u00c7\7p\2\2\u00c7\u00c8\7i\2\2\u00c8\64")
        buf.write("\3\2\2\2\u00c9\u00ca\7u\2\2\u00ca\u00cb\7q\2\2\u00cb\u00cc")
        buf.write("\7t\2\2\u00cc\u00cd\7v\2\2\u00cd\u00ce\7\"\2\2\u00ce\u00cf")
        buf.write("\7d\2\2\u00cf\u00d0\7{\2\2\u00d0\66\3\2\2\2\u00d1\u00d2")
        buf.write("\7c\2\2\u00d2\u00d3\7u\2\2\u00d3\u00d4\7e\2\2\u00d48\3")
        buf.write("\2\2\2\u00d5\u00d6\7f\2\2\u00d6\u00d7\7g\2\2\u00d7\u00d8")
        buf.write("\7u\2\2\u00d8\u00d9\7e\2\2\u00d9:\3\2\2\2\u00da\u00db")
        buf.write("\7v\2\2\u00db\u00dc\7q\2\2\u00dc\u00dd\7r\2\2\u00dd<\3")
        buf.write("\2\2\2\u00de\u00df\7h\2\2\u00df\u00e0\7q\2\2\u00e0\u00e1")
        buf.write("\7t\2\2\u00e1\u00e2\7y\2\2\u00e2\u00e3\7c\2\2\u00e3\u00e4")
        buf.write("\7t\2\2\u00e4\u00e5\7f\2\2\u00e5>\3\2\2\2\u00e6\u00e7")
        buf.write("\7d\2\2\u00e7\u00e8\7c\2\2\u00e8\u00e9\7e\2\2\u00e9\u00ea")
        buf.write("\7m\2\2\u00ea\u00eb\7y\2\2\u00eb\u00ec\7c\2\2\u00ec\u00ed")
        buf.write("\7t\2\2\u00ed\u00ee\7f\2\2\u00ee@\3\2\2\2\u00ef\u00f0")
        buf.write("\7<\2\2\u00f0B\3\2\2\2\u00f1\u00f2\7/\2\2\u00f2\u00f3")
        buf.write("\7@\2\2\u00f3D\3\2\2\2\u00f4\u00f5\7>\2\2\u00f5\u00f6")
        buf.write("\7/\2\2\u00f6F\3\2\2\2\u00f7\u00f8\7p\2\2\u00f8\u00f9")
        buf.write("\7w\2\2\u00f9\u00fa\7n\2\2\u00fa\u00fb\7n\2\2\u00fbH\3")
        buf.write("\2\2\2\u00fc\u00fd\7>\2\2\u00fdJ\3\2\2\2\u00fe\u00ff\7")
        buf.write("@\2\2\u00ffL\3\2\2\2\u0100\u0101\7?\2\2\u0101N\3\2\2\2")
        buf.write("\u0102\u0103\7>\2\2\u0103\u0104\7?\2\2\u0104P\3\2\2\2")
        buf.write("\u0105\u0106\7?\2\2\u0106\u0107\7@\2\2\u0107R\3\2\2\2")
        buf.write("\u0108\u0109\7u\2\2\u0109\u010a\7w\2\2\u010a\u010b\7o")
        buf.write("\2\2\u010bT\3\2\2\2\u010c\u010d\7c\2\2\u010d\u010e\7x")
        buf.write("\2\2\u010e\u010f\7i\2\2\u010fV\3\2\2\2\u0110\u0117\7\62")
        buf.write("\2\2\u0111\u0113\4\62;\2\u0112\u0111\3\2\2\2\u0113\u0114")
        buf.write("\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115")
        buf.write("\u0117\3\2\2\2\u0116\u0110\3\2\2\2\u0116\u0112\3\2\2\2")
        buf.write("\u0117X\3\2\2\2\u0118\u011a\4c|\2\u0119\u0118\3\2\2\2")
        buf.write("\u011a\u011b\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3")
        buf.write("\2\2\2\u011cZ\3\2\2\2\u011d\u011f\t\2\2\2\u011e\u011d")
        buf.write("\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u011e\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123\b.\2\2")
        buf.write("\u0123\\\3\2\2\2\7\2\u0114\u0116\u011b\u0120\3\b\2\2")
        return buf.getvalue()


class aiqlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    INT = 43
    STRING = 44
    WS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'from'", "'to'", "'!'", "'not'", "'in'", "','", 
            "'as'", "'['", "']'", "'.'", "'before'", "'after'", "'within'", 
            "'with'", "'proc'", "'conn'", "'&&'", "'||'", "'ret'", "'count'", 
            "'distinct'", "'group by'", "'having'", "'sort by'", "'asc'", 
            "'desc'", "'top'", "'forward'", "'backward'", "':'", "'->'", 
            "'<-'", "'null'", "'<'", "'>'", "'='", "'<='", "'=>'", "'sum'", 
            "'avg'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "INT", "STRING", "WS" ]

    grammarFileName = "aiql.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


