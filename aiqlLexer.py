# Generated from aiql.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\65")
        buf.write("\u015c\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3")
        buf.write("\b\3\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33")
        buf.write("\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3!\3!\3!\3\"")
        buf.write("\3\"\3\"\3#\3#\3#\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3\'")
        buf.write("\3(\3(\3(\3)\3)\3)\3)\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\61\3\61\6\61\u0149\n\61\r\61\16")
        buf.write("\61\u014a\5\61\u014d\n\61\3\62\6\62\u0150\n\62\r\62\16")
        buf.write("\62\u0151\3\63\3\63\3\64\6\64\u0157\n\64\r\64\16\64\u0158")
        buf.write("\3\64\3\64\2\2\65\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23")
        buf.write("\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25")
        buf.write(")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A")
        buf.write("\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65")
        buf.write("\3\2\4\4\2C\\c|\5\2\13\f\17\17\"\"\2\u015f\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2")
        buf.write("\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29")
        buf.write("\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2")
        buf.write("C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2")
        buf.write("\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2")
        buf.write("\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2")
        buf.write("\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\3i\3")
        buf.write("\2\2\2\5q\3\2\2\2\7s\3\2\2\2\tu\3\2\2\2\13z\3\2\2\2\r")
        buf.write("}\3\2\2\2\17\u0081\3\2\2\2\21\u0084\3\2\2\2\23\u0086\3")
        buf.write("\2\2\2\25\u0089\3\2\2\2\27\u008b\3\2\2\2\31\u008d\3\2")
        buf.write("\2\2\33\u008f\3\2\2\2\35\u0096\3\2\2\2\37\u009c\3\2\2")
        buf.write("\2!\u00a3\3\2\2\2#\u00a8\3\2\2\2%\u00aa\3\2\2\2\'\u00ad")
        buf.write("\3\2\2\2)\u00b0\3\2\2\2+\u00b4\3\2\2\2-\u00ba\3\2\2\2")
        buf.write("/\u00c3\3\2\2\2\61\u00cc\3\2\2\2\63\u00d3\3\2\2\2\65\u00db")
        buf.write("\3\2\2\2\67\u00df\3\2\2\29\u00e4\3\2\2\2;\u00e8\3\2\2")
        buf.write("\2=\u00f0\3\2\2\2?\u00f9\3\2\2\2A\u00fb\3\2\2\2C\u00fe")
        buf.write("\3\2\2\2E\u0101\3\2\2\2G\u0106\3\2\2\2I\u0108\3\2\2\2")
        buf.write("K\u010a\3\2\2\2M\u010c\3\2\2\2O\u010f\3\2\2\2Q\u0112\3")
        buf.write("\2\2\2S\u0116\3\2\2\2U\u011a\3\2\2\2W\u0122\3\2\2\2Y\u0127")
        buf.write("\3\2\2\2[\u012c\3\2\2\2]\u0135\3\2\2\2_\u013e\3\2\2\2")
        buf.write("a\u014c\3\2\2\2c\u014f\3\2\2\2e\u0153\3\2\2\2g\u0156\3")
        buf.write("\2\2\2ij\7c\2\2jk\7p\2\2kl\7q\2\2lm\7o\2\2mn\7c\2\2no")
        buf.write("\7n\2\2op\7{\2\2p\4\3\2\2\2qr\7*\2\2r\6\3\2\2\2st\7+\2")
        buf.write("\2t\b\3\2\2\2uv\7h\2\2vw\7t\2\2wx\7q\2\2xy\7o\2\2y\n\3")
        buf.write("\2\2\2z{\7v\2\2{|\7q\2\2|\f\3\2\2\2}~\7p\2\2~\177\7q\2")
        buf.write("\2\177\u0080\7v\2\2\u0080\16\3\2\2\2\u0081\u0082\7k\2")
        buf.write("\2\u0082\u0083\7p\2\2\u0083\20\3\2\2\2\u0084\u0085\7.")
        buf.write("\2\2\u0085\22\3\2\2\2\u0086\u0087\7c\2\2\u0087\u0088\7")
        buf.write("u\2\2\u0088\24\3\2\2\2\u0089\u008a\7]\2\2\u008a\26\3\2")
        buf.write("\2\2\u008b\u008c\7_\2\2\u008c\30\3\2\2\2\u008d\u008e\7")
        buf.write("\60\2\2\u008e\32\3\2\2\2\u008f\u0090\7d\2\2\u0090\u0091")
        buf.write("\7g\2\2\u0091\u0092\7h\2\2\u0092\u0093\7q\2\2\u0093\u0094")
        buf.write("\7t\2\2\u0094\u0095\7g\2\2\u0095\34\3\2\2\2\u0096\u0097")
        buf.write("\7c\2\2\u0097\u0098\7h\2\2\u0098\u0099\7v\2\2\u0099\u009a")
        buf.write("\7g\2\2\u009a\u009b\7t\2\2\u009b\36\3\2\2\2\u009c\u009d")
        buf.write("\7y\2\2\u009d\u009e\7k\2\2\u009e\u009f\7v\2\2\u009f\u00a0")
        buf.write("\7j\2\2\u00a0\u00a1\7k\2\2\u00a1\u00a2\7p\2\2\u00a2 \3")
        buf.write("\2\2\2\u00a3\u00a4\7y\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6")
        buf.write("\7v\2\2\u00a6\u00a7\7j\2\2\u00a7\"\3\2\2\2\u00a8\u00a9")
        buf.write("\7#\2\2\u00a9$\3\2\2\2\u00aa\u00ab\7(\2\2\u00ab\u00ac")
        buf.write("\7(\2\2\u00ac&\3\2\2\2\u00ad\u00ae\7~\2\2\u00ae\u00af")
        buf.write("\7~\2\2\u00af(\3\2\2\2\u00b0\u00b1\7t\2\2\u00b1\u00b2")
        buf.write("\7g\2\2\u00b2\u00b3\7v\2\2\u00b3*\3\2\2\2\u00b4\u00b5")
        buf.write("\7e\2\2\u00b5\u00b6\7q\2\2\u00b6\u00b7\7w\2\2\u00b7\u00b8")
        buf.write("\7p\2\2\u00b8\u00b9\7v\2\2\u00b9,\3\2\2\2\u00ba\u00bb")
        buf.write("\7f\2\2\u00bb\u00bc\7k\2\2\u00bc\u00bd\7u\2\2\u00bd\u00be")
        buf.write("\7v\2\2\u00be\u00bf\7k\2\2\u00bf\u00c0\7p\2\2\u00c0\u00c1")
        buf.write("\7e\2\2\u00c1\u00c2\7v\2\2\u00c2.\3\2\2\2\u00c3\u00c4")
        buf.write("\7i\2\2\u00c4\u00c5\7t\2\2\u00c5\u00c6\7q\2\2\u00c6\u00c7")
        buf.write("\7w\2\2\u00c7\u00c8\7r\2\2\u00c8\u00c9\7\"\2\2\u00c9\u00ca")
        buf.write("\7d\2\2\u00ca\u00cb\7{\2\2\u00cb\60\3\2\2\2\u00cc\u00cd")
        buf.write("\7j\2\2\u00cd\u00ce\7c\2\2\u00ce\u00cf\7x\2\2\u00cf\u00d0")
        buf.write("\7k\2\2\u00d0\u00d1\7p\2\2\u00d1\u00d2\7i\2\2\u00d2\62")
        buf.write("\3\2\2\2\u00d3\u00d4\7u\2\2\u00d4\u00d5\7q\2\2\u00d5\u00d6")
        buf.write("\7t\2\2\u00d6\u00d7\7v\2\2\u00d7\u00d8\7\"\2\2\u00d8\u00d9")
        buf.write("\7d\2\2\u00d9\u00da\7{\2\2\u00da\64\3\2\2\2\u00db\u00dc")
        buf.write("\7c\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de\7e\2\2\u00de\66")
        buf.write("\3\2\2\2\u00df\u00e0\7f\2\2\u00e0\u00e1\7g\2\2\u00e1\u00e2")
        buf.write("\7u\2\2\u00e2\u00e3\7e\2\2\u00e38\3\2\2\2\u00e4\u00e5")
        buf.write("\7v\2\2\u00e5\u00e6\7q\2\2\u00e6\u00e7\7r\2\2\u00e7:\3")
        buf.write("\2\2\2\u00e8\u00e9\7h\2\2\u00e9\u00ea\7q\2\2\u00ea\u00eb")
        buf.write("\7t\2\2\u00eb\u00ec\7y\2\2\u00ec\u00ed\7c\2\2\u00ed\u00ee")
        buf.write("\7t\2\2\u00ee\u00ef\7f\2\2\u00ef<\3\2\2\2\u00f0\u00f1")
        buf.write("\7d\2\2\u00f1\u00f2\7c\2\2\u00f2\u00f3\7e\2\2\u00f3\u00f4")
        buf.write("\7m\2\2\u00f4\u00f5\7y\2\2\u00f5\u00f6\7c\2\2\u00f6\u00f7")
        buf.write("\7t\2\2\u00f7\u00f8\7f\2\2\u00f8>\3\2\2\2\u00f9\u00fa")
        buf.write("\7<\2\2\u00fa@\3\2\2\2\u00fb\u00fc\7/\2\2\u00fc\u00fd")
        buf.write("\7@\2\2\u00fdB\3\2\2\2\u00fe\u00ff\7>\2\2\u00ff\u0100")
        buf.write("\7/\2\2\u0100D\3\2\2\2\u0101\u0102\7p\2\2\u0102\u0103")
        buf.write("\7w\2\2\u0103\u0104\7n\2\2\u0104\u0105\7n\2\2\u0105F\3")
        buf.write("\2\2\2\u0106\u0107\7>\2\2\u0107H\3\2\2\2\u0108\u0109\7")
        buf.write("@\2\2\u0109J\3\2\2\2\u010a\u010b\7?\2\2\u010bL\3\2\2\2")
        buf.write("\u010c\u010d\7>\2\2\u010d\u010e\7?\2\2\u010eN\3\2\2\2")
        buf.write("\u010f\u0110\7?\2\2\u0110\u0111\7@\2\2\u0111P\3\2\2\2")
        buf.write("\u0112\u0113\7u\2\2\u0113\u0114\7w\2\2\u0114\u0115\7o")
        buf.write("\2\2\u0115R\3\2\2\2\u0116\u0117\7c\2\2\u0117\u0118\7x")
        buf.write("\2\2\u0118\u0119\7i\2\2\u0119T\3\2\2\2\u011a\u011b\7g")
        buf.write("\2\2\u011b\u011c\7z\2\2\u011c\u011d\7g\2\2\u011d\u011e")
        buf.write("\7e\2\2\u011e\u011f\7w\2\2\u011f\u0120\7v\2\2\u0120\u0121")
        buf.write("\7g\2\2\u0121V\3\2\2\2\u0122\u0123\7h\2\2\u0123\u0124")
        buf.write("\7c\2\2\u0124\u0125\7k\2\2\u0125\u0126\7n\2\2\u0126X\3")
        buf.write("\2\2\2\u0127\u0128\7r\2\2\u0128\u0129\7t\2\2\u0129\u012a")
        buf.write("\7k\2\2\u012a\u012b\7x\2\2\u012bZ\3\2\2\2\u012c\u012d")
        buf.write("\7g\2\2\u012d\u012e\7z\2\2\u012e\u012f\7r\2\2\u012f\u0130")
        buf.write("\7n\2\2\u0130\u0131\7k\2\2\u0131\u0132\7e\2\2\u0132\u0133")
        buf.write("\7k\2\2\u0133\u0134\7v\2\2\u0134\\\3\2\2\2\u0135\u0136")
        buf.write("\7u\2\2\u0136\u0137\7j\2\2\u0137\u0138\7w\2\2\u0138\u0139")
        buf.write("\7v\2\2\u0139\u013a\7f\2\2\u013a\u013b\7q\2\2\u013b\u013c")
        buf.write("\7y\2\2\u013c\u013d\7p\2\2\u013d^\3\2\2\2\u013e\u013f")
        buf.write("\7e\2\2\u013f\u0140\7q\2\2\u0140\u0141\7p\2\2\u0141\u0142")
        buf.write("\7p\2\2\u0142\u0143\7g\2\2\u0143\u0144\7e\2\2\u0144\u0145")
        buf.write("\7v\2\2\u0145`\3\2\2\2\u0146\u014d\7\62\2\2\u0147\u0149")
        buf.write("\4\62;\2\u0148\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a")
        buf.write("\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014d\3\2\2\2")
        buf.write("\u014c\u0146\3\2\2\2\u014c\u0148\3\2\2\2\u014db\3\2\2")
        buf.write("\2\u014e\u0150\5e\63\2\u014f\u014e\3\2\2\2\u0150\u0151")
        buf.write("\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152")
        buf.write("d\3\2\2\2\u0153\u0154\t\2\2\2\u0154f\3\2\2\2\u0155\u0157")
        buf.write("\t\3\2\2\u0156\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015a\3\2\2\2")
        buf.write("\u015a\u015b\b\64\2\2\u015bh\3\2\2\2\7\2\u014a\u014c\u0151")
        buf.write("\u0158\3\b\2\2")
        return buf.getvalue()


class aiqlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    INT = 48
    STRING = 49
    LETTER = 50
    WS = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'anomaly'", "'('", "')'", "'from'", "'to'", "'not'", "'in'", 
            "','", "'as'", "'['", "']'", "'.'", "'before'", "'after'", "'within'", 
            "'with'", "'!'", "'&&'", "'||'", "'ret'", "'count'", "'distinct'", 
            "'group by'", "'having'", "'sort by'", "'asc'", "'desc'", "'top'", 
            "'forward'", "'backward'", "':'", "'->'", "'<-'", "'null'", 
            "'<'", "'>'", "'='", "'<='", "'=>'", "'sum'", "'avg'", "'execute'", 
            "'fail'", "'priv'", "'explicit'", "'shutdown'", "'connect'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "STRING", "LETTER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "INT", "STRING", "LETTER", 
                  "WS" ]

    grammarFileName = "aiql.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


